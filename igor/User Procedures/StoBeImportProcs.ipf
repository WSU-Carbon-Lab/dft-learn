#pragma TextEncoding = "UTF-8"
#pragma rtGlobals=3		// Use modern global access method and strict wave access.

//Written by: 
//Victor Manuel Murcia Ruiz 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Wrapper function
Function DFTwrapper1(pathName,filePath,atomName,fnum,[d,dInt,Ecorr])
	String pathName //Set to ""
	String filePath //file name
	String atomName //What type of atom was the calculation done on? (i.e. "c","n","o",etc.)
	Variable fnum //How many files are going to be loaded?.
	Variable d	//plot DFT NEXAFS and Oscillator Strengths together
	Variable dInt	//Display the NEXAFS by itself
	Wave Ecorr	//Energy correction wave
	String currentFolder = GetDataFolder(1)
	
	if(ParamIsDefault(Ecorr))
		//Load Ground State Energy
		print "Load Ground State Calculation to determine state Energy..."
		LoadAllGNDParams(pathName,filePath,fnum)
		
		//Load Excited State Energy
		print "Load Excited State Calculation to determine state Energy..."
		LoadAllEXC_En(pathName,filePath,fnum)
	
		//Load Transition Potential Energy
		print "Load Transition Potential Calculation to determine state Energy..."
		LoadAllTPParams(pathName,filePath,fnum)
	
		//Determine the Energy Correction/Shift for each atom
		Variable H2eV = 27.2114	//Conversion of Hartree to eV 1 Hartree = 27.2114 eV
		Wave GND,EXC,TP,LUMO_En,IP
	
		if(!WaveExists(GND))
			Abort "Wave containing the Ground State Energies not found. Aborting..."
		endif
	
		if(!WaveExists(EXC))
			Abort "Wave containing the Excited State Energies not found. Aborting..."
		endif
	
		if(!WaveExists(TP))
			Abort "Wave containing the Transition State Energies not found. Aborting..."
		endif
	
		if(!WaveExists(LUMO_En))
			Abort "Wave containing the LUMO Transition Energy not found. Aborting."
		endif
		
		if(!WaveExists(IP))
			Abort "Wave containing the Ionization Potential not found. Aborting."
		endif
		//Convert energies from Hartree to eV
		GND  = GND*H2eV
		EXC  = EXC*H2eV
		TP   = TP*H2eV
		
		print "Determining the energy correction for each atom."
		makeCorrWave(GND,EXC,LUMO_En,fnum)
		Wave Ecorr
		
	//	print "Adjusting energy of Ionization Potential"
	//	correctIPEnergy(IP,Ecorr)
	//	Wave IP
	endif

	SetDataFolder currentFolder
	
	//Organize folders. Move all polar angle folders into a single folder 
	Organize_TDM_Folders(atomName,fnum,filePath)	
	
	Print "Start loading DFT NEXAFS files generated by StoBe"

	SetDataFolder currentFolder
	LoadAllDFTspec(pathName,fnum) //Load all .out files containing DFT NEXAFS
	
	SetDataFolder currentFolder
	Wave eV_	
	DFTinterpAll(atomName,atomName,Ecorr,fnum)	//Interpolate DFT NEXAFS
	
	Variable i
	Make/O/N=(2000) energy
	for(i=0;i<2000;i+=1)
		energy[i] = 270 +i*((320-270)/2000)
	endfor
	
	addInterpSpec(atomName,energy,fnum)	//Add interpolated spectra to get total NEXAFS
	
	//Organize stuff 
	Organize_DFT_NEXAFS_Folders(atomName,fnum,filePath)
	RemoveWaves(atomName,fnum)		
	SetDataFolder root:Packages:DFTClustering	
	
	//Plot the raw StoBe DFT NEXAFS and place the graphs onto a layout
	if(d)
		Print "Plotting Oscillator Strengths generated by StOBe"
		PlotAllOSwNEXAFS(fnum,energy,Ecorr,filePath)
		dftRawLayout(fnum)
	endif
	
	print "All required waves have been loaded"
End

Function LoadAllGNDParams(pathName,filePath,nFiles)	//Loads all .out files from StoBe containing info necessary to build tensor	
	
	String pathName					//Name of symbolic path of folder containing files to be loaded. You can also type "" to create a new symbolic path.
	String filePath					//Name of file to be loaded as defined in LoadDFTData procedure
	Variable nFiles
	
	Variable i , j					//Used to index files.
	Variable result
	
	if (strlen(pathName)==0)
		NewPath/O tempPath
		if (V_flag !=0)
			return -1
		endif
		pathName = "tempPath"
	endif

	for(i=0;i<nFiles;i+=1) //Loops through every file in folder with a .out extension
		filePath = SortList(IndexedFile($pathName,-1,".out"),";",16)
		String currentFile = StringFromList(i,filePath)
		currentFile =  RemoveEnding(currentFile,";")

		if (strlen(filePath) ==0)		//if there are no more files
			break					//end loop
		endif
		result = extractGND_En2(pathName, currentFile, ".out",i+1)
	endfor					//The loop ends after there are no more files with a .out extension present
	
	if (Exists("tempPath"))
		KillPath tempPath
	endif

	//print filePath
	
	String GNDList = WaveList("GND_En*",";","")
	String LUMOList = WaveList("LUMO_POS_*",";","")
	String OCCList = WaveList("OCCU_*",";","")
	String randomWaveList = WaveList("wave*",";","")
	Make/O/N=(nFiles) GND,LUMO,OCC
	for(i=0;i<nFiles;i+=1)
		String cGNDname = StringFromList(i,GNDList)
		String cLUMOname = StringFromList(i,LUMOList)
		String cOCCUname = StringFromList(i,OCCList)
		String randomWaveName = StringFromList(i,randomWaveList)
		Wave w   = $cGNDname
		Wave w1  = $cLUMOname
		Wave w2  = $cOCCUname
		Wave w3  = $randomWaveName
		Variable nMOs = numpnts(w1)
		GND[i] = w[0]
		for(j=0;j<nMOs;j+=1)
			Variable cOCC = w2[j]
			if(cOCC == 0)
				OCC[i] = cOCC
				LUMO[i] = j+1
				break
			endif
		endfor
		KillWaves/Z w,w1,w2,w3
	endfor
	
	return 0
End

Function FindGND_Energy2(pathName, filePath, s1StartLine, s2StartLine, s1NumLines , s2NumLines)
	String pathName		// Name of symbolic path or ""
	String filePath			// Name of file or partial path relative to symbolic path
	Variable &s1StartLine	// Pass-by-reference output
	Variable &s2StartLine
	Variable &s1NumLines	// Pass-by-reference output
 	Variable &s2NumLines
 	
 	s1StartLine = -1
 	s2StartLine = -1
 	s1NumLines  = -1
 	s2NumLines  = -1
 
	Variable refNum
 
	Open/R/P=$pathName refNum as filePath 
	String buffer, text
	Variable line = 0 	
 	//This part of the function defines the lines that designate the start of the sections to be loaded
 	//Section 1 looks for the energy of the system in the ground state
 	//Section 2 looks for the beginning of the listing of molecular orbitals
 	String s1Start = " Total energy   (H) ="
 	String s2Start = "         Occup.    Energy(eV)    Sym  (pos.)     Occup.    Energy(eV)    Sym  (pos.)"
	String sStartList = s1Start + ";" + s2Start
	
	String s1Finish = " Nuc-nuc energy (H) ="
	String s2Finish = " "
	String sFinishList = s1Finish + ";" + s2Finish
	
	Variable i, nSections = ItemsInList(sStartList)
	String targetIniString,targetFinString
	
	for(i=0;i<nSections;i+=1)
		targetIniString = StringFromList(i,sStartList)
		targetFinString = StringFromList(i,sFinishList)
		
		Variable targetStringLength = strlen(targetIniString)
		// Find first line
		do
			FReadLine refNum, buffer
			if (strlen(buffer) == 0)
				Close refNum
				return -1						// The expected keyword was not found in the file
			endif
			text = buffer[0,targetStringLength-1]
			if (CmpStr(text,targetIniString) == 0)	
				if(i==0)
					s1StartLine = line
					break
				elseif(i==1)
					s2StartLine = line
					break
				endif							// This is is the first data line
			endif
			line += 1
		while(1)
 
		// Find last line
		targetStringLength = strlen(targetFinString)
		do
			FReadLine refNum, buffer
			if (strlen(buffer) == 0)
				// Ran out of lines - assume this is the last line of data
				line += 1
				break
			endif
			text = buffer[0,targetStringLength-1]
			if (CmpStr(text,targetFinString) != 0)	// Line does not start with "<space>#>?
				// This is is the line after the last data line
				break	
			endif
			line += 1
		while(1)
		if(i==0)
			s1NumLines = line - s1StartLine + 1
		elseif(i==1)
			s2NumLines = line - s2StartLine + 1
		endif
	endfor 
 
	// Print firstDataLine, numDataLines		// For debugging only
	Close refNum 
	return 0		// Success
End

Function extractGND_En2(pathName, filePath, extension,cAtom)
	String pathName		// Name of symbolic path or "" to display dialog.
	String filePath			// Name of file or "" to display dialog. Can also be full or partial path relative to symbolic path.
	String extension
	Variable cAtom
	
	Variable refNum
 
	// Possibly display Open File dialog.
	if ((strlen(pathName)==0) || (strlen(filePath)==0))
		Open /D /R /P=$pathName /T=(extension) refNum as filePath
		filePath = S_fileName			// S_fileName is set by Open/D
		if (strlen(filePath) == 0)		// User cancelled?
			return -1
		endif
		// filePath is now a full path to the file.
	endif
 
	Variable  s1StartLine, s2StartLine, s1NumLines , s2NumLines
	Variable GNDE = FindGND_Energy2(pathName, filePath,  s1StartLine, s2StartLine, s1NumLines , s2NumLines)
	if (GNDE != 0)
		Printf "No data found in file %s\r", filePath
		return -1
	endif
 	
 	String DFTData = RemoveEnding(filePath,"gnd.out") 	
	String columnInfoStr = ""		// Prepare parameter for /B flag	
	//Load first section
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='_skip_',W=20;"
	columnInfoStr += "N='_skip_',W=3;"
	columnInfoStr += "N='GND_En_',W=16;"
	columnInfoStr += "N='_skip_',W=40;"
	LoadWave /F={6, 11, 0}  /B=columnInfoStr /D /O /K=0 /L={0,s1StartLine,s1NumLines,0,0} /A /Q /P=$pathName filePath	
	//Reset column Info String for new section
	columnInfoStr = ""	
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='LUMO_POS_',W=7;"
	columnInfoStr += "N='OCCU_',W=7;"
	columnInfoStr += "N='_skip_',W=15;"
	columnInfoStr += "N='_skip_',W=6;"
	columnInfoStr += "N='_skip_',W=6;"
	columnInfoStr += "N='_skip_',W=7;"
	columnInfoStr += "N='_skip_',W=15;"
	columnInfoStr += "N='_skip_',W=6;"
	columnInfoStr += "N='_skip_',W=6;"
	LoadWave /F={10, 11, 0} /B=columnInfoStr /D /O /K=0 /L={1,s2StartLine+3,s2NumLines,0,0} /A /Q /P=$pathName filePath
	
	Wave GND_En_
	String currentGNDname = "GND_En_" + num2str(cAtom)
	Duplicate/O GND_En_,$currentGNDname
	KillWaves/Z GND_En_
	Wave LUMO_POS_,OCCU_
	String currentLUMOname = "LUMO_POS_" + num2str(cAtom)
	String currentOCCUname = "OCCU_" + num2str(cAtom)
	Duplicate/O LUMO_POS_,$currentLUMOname
	Duplicate/O OCCU_,$currentOCCUname
	KillWaves/Z LUMO_POS_,OCCU_
 	SetDataFolder root:Packages:DFTClustering
	return 0
End

Function FindEXC_Energy(pathName, filePath, firstDataLine, numDataLines)
	String pathName		// Name of symbolic path or ""
	String filePath			// Name of file or partial path relative to symbolic path
	Variable &firstDataLine	// Pass-by-reference output
	Variable &numDataLines	// Pass-by-reference output
 
	firstDataLine = -1
	numDataLines = -1
 
	Variable refNum
 
	Open/R/P=$pathName refNum as filePath
 
	String buffer, text
	Variable line = 0
 
	String targetString = " Total energy   (H) =   "
	Variable targetStringLength = strlen(targetString)
 
	// Find first line
	do
		FReadLine refNum, buffer
		if (strlen(buffer) == 0)
			Close refNum
			return -1						// The expected keyword was not found in the file
		endif
		text = buffer[0,targetStringLength-1]
		if (CmpStr(text,targetString) == 0)	
			firstDataLine = line
			break							// This is is the first data line
		endif
		line += 1
	while(1)
 
	// Find last line
	targetString = " Nuc-nuc energy (H) ="
	targetStringLength = strlen(targetString)
	do
		FReadLine refNum, buffer
		if (strlen(buffer) == 0)
			// Ran out of lines - assume this is the last line of data
			line += 1
			break
		endif
		text = buffer[0,targetStringLength-1]
		if (CmpStr(text,targetString) != 0)	// Line does not start with "<space>#>?
			// This is is the line after the last data line
			break	
		endif
		line += 1
	while(1)
 
	numDataLines = line - firstDataLine + 1
 
	// Print firstDataLine, numDataLines		// For debugging only
 
	Close refNum
 
	return 0		// Success
End

Function extractEXC_En(pathName, filePath, extension,cAtom)
	String pathName		// Name of symbolic path or "" to display dialog.
	String filePath			// Name of file or "" to display dialog. Can also be full or partial path relative to symbolic path.
	String extension
	Variable cAtom
	Variable refNum
 
	// Possibly display Open File dialog.
	if ((strlen(pathName)==0) || (strlen(filePath)==0))
		Open /D /R /P=$pathName /T=(extension) refNum as filePath
		filePath = S_fileName			// S_fileName is set by Open/D
		if (strlen(filePath) == 0)		// User cancelled?
			return -1
		endif
		// filePath is now a full path to the file.
	endif
 
	Variable firstDataLine, numLines 
	Variable EXCE = FindEXC_Energy(pathName, filePath, firstDataLine, numLines)
	if (EXCE != 0)
		Printf "No data found in file %s\r", filePath
		return -1
	endif
 	
 	String DFTData = RemoveEnding(filePath,"exc.out")
 	
	String columnInfoStr = ""		// Prepare parameter for /B flag
	
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='_skip_',W=20;"
	columnInfoStr += "N='_skip_',W=3;"
	columnInfoStr += "N='EXC_En_',W=16;"
	columnInfoStr += "N='_skip_',W=40;"
 
	LoadWave /F={6, 11, 0} /B=columnInfoStr /D /O /K=0 /L={0,firstDataLine,numLines,0,0} /A /Q /P=$pathName filePath
	
	Wave EXC_En_
	String currentEXCname = "EXC_En_" + num2str(cAtom)
	Duplicate/O EXC_En_,$currentEXCname
	KillWaves/Z EXC_En_
 	SetDataFolder root:Packages:DFTClustering
	return 0
End

Function LoadAllEXC_En(pathName,filePath,nFiles)	//Loads all .out files from StoBe containing info necessary to build tensor	
	
	String pathName					//Name of symbolic path of folder containing files to be loaded. You can also type "" to create a new symbolic path.
	String filePath					//Name of file to be loaded as defined in LoadDFTData procedure
	Variable nFiles
	Variable i	= 0					//Used to index files.
	Variable result
	
	if (strlen(pathName)==0)
		NewPath/O tempPath
		if (V_flag !=0)
			return -1
		endif
		pathName = "tempPath"
	endif
	
	i=0

	for(i=0;i<nFiles;i+=1) //Loops through every file in folder with a .out extension
		filePath = SortList(IndexedFile($pathName,-1,".out"),";",16)
		String currentFile = StringFromList(i,filePath)
		currentFile =  RemoveEnding(currentFile,";")

		if (strlen(filePath) ==0)		//if there are no more files
			break					//end loop
		endif
		result = extractEXC_En(pathName, currentFile, ".out",i+1)
	endfor					//The loop ends after there are no more files with a .out extension present
	
	if (Exists("tempPath"))
		KillPath tempPath
	endif

	//print filePath
	
	String EXCList = WaveList("EXC_En*",";","")
	Make/O/N=(nFiles) EXC
	for(i=0;i<nFiles;i+=1)
		String cEXCname = StringFromList(i,EXCList)
		Wave w = $cEXCname
		EXC[i] = w[0]
		KillWaves/Z w
	endfor
	
	return 0
End

Function extractTPParams(pathName, filePath, extension,cAtom)
	String pathName		// Name of symbolic path or "" to display dialog.
	String filePath			// Name of file or "" to display dialog. Can also be full or partial path relative to symbolic path.
	String extension
	Variable cAtom
	Variable refNum
 
	// Possibly display Open File dialog.
	if ((strlen(pathName)==0) || (strlen(filePath)==0))
		Open /D /R /P=$pathName /T=(extension) refNum as filePath
		filePath = S_fileName			// S_fileName is set by Open/D
		if (strlen(filePath) == 0)		// User cancelled?
			return -1
		endif
		// filePath is now a full path to the file.
	endif
 
	Variable s1StartLine,s2StartLine,s3StartLine,s4StartLine, s1NumLines,s2NumLines,s3NumLines,s4NumLines
	Variable TPE = FindTPParams(pathName, filePath,s1StartLine,s2StartLine,s3StartLine,s4StartLine, s1NumLines,s2NumLines,s3NumLines,s4NumLines)
	if (TPE != 0)
		Printf "No data found in file %s\r", filePath
		return -1
	endif
 	
 	String DFTData = RemoveEnding(filePath,"tp.out")
 	
	String columnInfoStr = ""		// Prepare parameter for /B flag
	//Section 1 == Energy of Transition Potential State
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='_skip_',W=20;"
	columnInfoStr += "N='_skip_',W=3;"
	columnInfoStr += "N='TP_En_',W=16;"
	columnInfoStr += "N='_skip_',W=40;" 
	LoadWave /F={6, 11, 0} /B=columnInfoStr /D /O /K=0 /L={0,s1StartLine,s1NumLines,0,0} /A /Q /P=$pathName filePath
	
	columnInfoStr = ""		// Prepare parameter for /B flag
	//Section 2 == Ionization Potential determined by TP calculation
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='_skip_',W=20;"
	columnInfoStr += "N='_skip_',W=5;"
	columnInfoStr += "N='_skip_',W=1;"
	columnInfoStr += "N='IP_',W=13;"
	columnInfoStr += "N='_skip_',W=3;"
	LoadWave /F={6, 11, 0} /B=columnInfoStr /D /O /K=0 /L={0,s2StartLine+2,s2NumLines,0,0} /A /Q /P=$pathName filePath
	
	columnInfoStr = ""		// Prepare parameter for /B flag
	//Section 3 == Energy of LUMO 
	columnInfoStr += "N='_skip_',W=2;"
	columnInfoStr += "N='_skip_',W=4;"
	columnInfoStr += "N='LUMO_En_',W=11;"
	columnInfoStr += "N='_skip_',W=11;"
	columnInfoStr += "N='_skip_',W=11;"
	columnInfoStr += "N='_skip_',W=11;"
	columnInfoStr += "N='_skip_',W=11;"
	columnInfoStr += "N='_skip_',W=14;"
	columnInfoStr += "N='_skip_',W=14;"
	columnInfoStr += "N='_skip_',W=14;"
	LoadWave /F={6, 11, 0} /B=columnInfoStr /D /O /K=0 /L={0,s3StartLine+4,s3NumLines,0,0} /A /Q /P=$pathName filePath
	
	Wave TP_En_,IP_,LUMO_En_
	String currentTPname = "TP_En_" + num2str(cAtom)
	String currentIPname = "IP_" + num2str(cAtom)
	String currentLUMOname = "LUMO_En_" + num2str(cAtom)
	Duplicate/O TP_En_,$currentTPname
	Duplicate/O IP_,$currentIPname
	Duplicate/O LUMO_En_,$currentLUMOname
	KillWaves/Z TP_En_,IP_,LUMO_En_
	
	columnInfoStr = ""	
	//Section 4 == Extraction of DFT NEXAFS parameters (i.e. transition energy, TDM components, oscillator strength)
	columnInfoStr += "N='_skip_',W=2;"
	columnInfoStr += "N='_skip_',W=4;"
	columnInfoStr += "N='eV_',W=11;"
	columnInfoStr += "N='OS_',W=11;"
	columnInfoStr += "N='TDMx_',W=11;"
	columnInfoStr += "N='TDMy_',W=11;"
	columnInfoStr += "N='TDMz_',W=11;"
	columnInfoStr += "N='_skip_',W=14;"
	columnInfoStr += "N='_skip_',W=14;"
	columnInfoStr += "N='_skip_',W=14;"	
	
	String currentFolder=GetDataFolder(1)
	String folderName = "root:Packages:DFTClustering:"+RemoveEnding(filepath,"tp.out")
	NewDataFolder/O/S $folderName
	SetDataFolder $folderName
	LoadWave /F={9, 11, 0} /B=columnInfoStr /D /O /K=0 /L={0,s4StartLine,s4NumLines,0,0} /A /Q /P=$pathName filePath
		
 	SetDataFolder root:Packages:DFTClustering
	return 0
End

Function FindTPParams(pathName, filePath, s1StartLine,s2StartLine,s3StartLine,s4StartLine, s1NumLines,s2NumLines,s3NumLines,s4NumLines)
	String pathName		// Name of symbolic path or ""
	String filePath			// Name of file or partial path relative to symbolic path
	Variable &s1StartLine	// Pass-by-reference output
	Variable &s2StartLine	// Pass-by-reference output
	Variable &s3StartLine	// Pass-by-reference output
	Variable &s4StartLine	// Pass-by-reference output
	Variable &s1NumLines	// Pass-by-reference output
	Variable &s2NumLines	// Pass-by-reference output
	Variable &s3NumLines	// Pass-by-reference output
	Variable &s4NumLines	// Pass-by-reference output
 
	s1StartLine = -1
	s2StartLine = -1
	s3StartLine = -1
	s4StartLine = -1
	s1NumLines  = -1
	s2NumLines  = -1
	s3NumLines  = -1
	s4NumLines  = -1
 
	Variable refNum
 
	Open/R/P=$pathName refNum as filePath
 
	String buffer, text
	Variable line = 0
 
	String s1Start = " Total energy   (H) =   "
	String s2Start =	 " Ionization potential     =    "
	String s3Start = " #   1"
	String s4Start = " #   1"
	String sStartList = s1Start + ";" + s2Start + ";" + s3Start + ";" + s4Start
	
	String s1Finish = " Nuc-nuc energy (H) =" 
	String s2Finish = " Core -> "
	String s3Finish = " #   2"
	String s4Finish = " #"
	String sFinishList = s1Finish + ";" + s2Finish + ";" + s3Finish + ";" + s4Finish
	
	Variable i, nSections = ItemsInList(sStartList)
	String targetIniString,targetFinString
	
	for(i=0;i<nSections;i+=1)
		targetIniString = StringFromList(i,sStartList)
		targetFinString = StringFromList(i,sFinishList)
		//For section 4, file needs to be reopened to reset the current line being read since
		//section 3 starts at the same line which messes up the reading
		if(i==3)
			Open/R/P=$pathName refNum as filePath
		endif
		
		Variable targetStringLength = strlen(targetIniString)
		// Find first line
		do
			FReadLine refNum, buffer
			if (strlen(buffer) == 0)
				Close refNum
				return -1						// The expected keyword was not found in the file
			endif
			text = buffer[0,targetStringLength-1]
			if (CmpStr(text,targetIniString) == 0)	
				if(i==0)	// This is is the first data line
					s1StartLine = line	
					break	
				elseif(i==1)
					s2StartLine = line
					break
				elseif(i==2)
					s3StartLine = line
					break
				elseif(i==3)
					s4StartLine = line
					break		
				endif							
			endif
			line += 1
		while(1)
		// Find last line
		targetStringLength = strlen(targetFinString)
		do
			FReadLine refNum, buffer
			if (strlen(buffer) == 0)
				// Ran out of lines - assume this is the last line of data
				line += 1
				break
			endif
			text = buffer[0,targetStringLength-1]
			if (CmpStr(text,targetFinString) != 0)	// Line does not start with "<space>#>?
				// This is is the line after the last data line
				break	
			endif
			line += 1
		while(1)
		if(i==0)
			s1NumLines = line - s1StartLine + 1
		elseif(i==1)
			s2NumLines = line - s2StartLine + 1
		elseif(i==2)
			s3NumLines = line - s3StartLine + 1
			line = 0
		elseif(i==3)
			s4NumLines = line - s4StartLine + 1	
		endif
	endfor
		
	//Print s1StartLine,s2StartLine,s3StartLine,s4StartLine 
	//Print s1NumLines,s2NumLines,s3NumLines,s4NumLines
	Close refNum
	return 0		// Success
End

Function LoadAllTPParams(pathName,filePath,nFiles)	//Loads all .out files from StoBe containing info necessary to build tensor	
	
	String pathName					//Name of symbolic path of folder containing files to be loaded. You can also type "" to create a new symbolic path.
	String filePath					//Name of file to be loaded as defined in LoadDFTData procedure
	Variable nFiles
	
	Variable i						//Used to index files.
	Variable result
	
	if (strlen(pathName)==0)
		NewPath/O tempPath
		if (V_flag !=0)
			return -1
		endif
		pathName = "tempPath"
	endif
	
	for(i=0;i<nFiles;i+=1) //Loops through every file in folder with a .out extension
		filePath = SortList(IndexedFile($pathName,-1,".out"),";",16)
		String currentFile = StringFromList(i,filePath)
		currentFile =  RemoveEnding(currentFile,";")

		if (strlen(filePath) ==0)		//if there are no more files
			break					//end loop
		endif
		result = extractTPParams(pathName, currentFile, ".out",i+1)
	endfor		//The loop ends after there are no more files with a .xas extension present
	
	if (Exists("tempPath"))
		KillPath tempPath
	endif
	
	//print filePath
	
	String ipList = WaveList("IP_*",";","")
	String TPList = WaveList("TP_En*",";","")
	String LUMOList = WaveList("LUMO_En_*",";","")
	String randomWaveList = WaveList("wave*",";","")
	Make/O/N=(nFiles) IP,TP,LUMO_En
	for(i=0;i<nFiles;i+=1)
		String cIPname = StringFromList(i,ipList)
		String cTPname = StringFromList(i,TPList)
		String cLUMOname = StringFromList(i,LUMOList)
		String randomWaveName = StringFromList(i,randomWaveList)
		Wave w  = $cIPname
		Wave w1 = $cTPname
		Wave w2 = $cLUMOname
		Wave w3 = $randomWaveName
		IP[i]       = w[0]
		TP[i]       = w1[0]
		LUMO_En[i]  = w2[0]
		KillWaves $cIPname,$cTPname,$cLUMOname,$randomWaveName
	endfor
	
	return 0
End

////////////////////////////////////////////////////////////////////////////////////////////////////////
//Starting here is the code that loads the NEXAFS simulated by StOBE
Function LoadDFTspec(DFTdata,pathName)

	String DFTdata	//Desired name of file
	String pathName	//Symbolic path where desired file is present
	String DFTFolder=GetDataFolder(1)		
	String foldername= "root:Packages:DFTClustering:"+RemoveEnding(DFTData,".out")	//Names folder by taking the file name and removing the .out, necessary for proper file parsing
	String DFTData2=RemoveEnding(DFTData,".out")			//Names the files by taking the file name and removing the .out ending
	String columnInfoStr = " "									//Contains set of names for each column in the .out file
	columnInfoStr += "C=1,F=0,W=7,N='_skip_';"
	columnInfoStr += "C=1,F=0,W=21,N=eV_"+DFTdata2+";"
	columnInfoStr += "C=1,F=0,W=28,N=OS_"+DFTdata2+";"
	
	NewDataFolder/O/S $foldername							//Makes a data folder based 
	//print DFTData											//prints the loaded files
	LoadWave/J/B=columnInfoStr/D/W/E=0/K=0/V={"\t, "," $",1,1}/F={3,13,0}/N/O/A/P=$pathName DFTData
	
	String enWave = "eV_"+DFTdata2
	String osWave = "OS_"+DFTdata2
	Wave x = $enWave
	Wave y = $osWave
End

Function LoadAllDFTspec(pathName,numFiles)	//Loads all .out files from StoBe containing info necessary to build tensor	
	
	String pathName					//Name of symbolic path of folder containing files to be loaded. You can also type "" to create a new symbolic path.
	Variable numFiles				//Number of files to be loaded
	String DFTData					//Name of file to be loaded as defined in LoadDFTData procedure
	Variable i=1						//Used to index files.
	Variable result
	
	if (strlen(pathName)==0)
		NewPath/O tempPath
		if (V_flag !=0)
			return -1
		endif
		pathName = "tempPath"
	endif
	
	do								//Loops through every file in folder with a .out extension
		DFTData = "c"+ num2str(i) +".out"
		
		if (strlen(DFTData) ==0)		//if there are no more files
			break					//end loop
		endif
		result = LoadDFTspec(DFTData,pathName)
		i +=1
	while(i<=numFiles)						//The loop ends after there are no more files with a .out extension present
	if (Exists("tempPath"))
		KillPath tempPath
	endif
	return 0
	
	SetDataFolder root:Packages:DFTClustering
End

Function Organize_TDM_Folders(fName,fnum,mol)
	String fName
	Variable fnum
	String mol
	
	String polarFName = "PolarAngles_" + mol
	NewDataFolder/O $polarFName//PolarAngles
	
	Variable i
	
	for(i=1;i<=fnum;i+=1)
		String newfName = fName + num2str(i)
		if(DataFolderExists(newfName)==1)
			MoveDataFolder/O=1/Z $newfName,$polarFName//PolarAngles
		endif
	endfor
End

Function DFTinterp(eV,DFTspec,Ecorr,[dInt])

	Wave eV, DFTspec
	Variable Ecorr
	Variable dInt
	
	String neweVwave = "n_" + NameOfWave(eV)
	String interpDFTspec = "int_" + NameOfWave(DFTspec)
	
	//Apply energy correction to eV wave from StoBe
	Duplicate/O eV, $neweVwave,root:eV_
	Wave ShifteV = $neweVwave
	
	ShifteV = eV + Ecorr
	
	//Perform interpolation of DFT spectra based on energy correction determined above
	Duplicate/O DFTspec, $interpDFTspec
	Wave corrDFTspec = $interpDFTspec
	
	corrDFTspec = interp(eV,ShifteV,DFTspec)
	//Plot the interpolated spectra
	if(dInt)
		Display/W=(10,50,360,300)	
		AppendToGraph corrDFTspec vs eV	//
		Label bottom "eV"
		Label left "Intensity[a.u.]"
		SetAxis bottom 280,310
	endif
End

Function DFTinterpAll(eV,DFTspec,corr,fnum)

	String eV,DFTspec	//For eV and DFTspec, element id (i.e. if Carbon, c, if Nitrogen,n,etc).
	Wave corr			//Energy shift wave
	Variable fnum	//How many spectra to interpolate
	
	String currentFolder = GetDataFolder(1)
	
	Variable i	
	
	String  neweV,newDFTspec
	//Apply energy shift to original eV wave and interpolate the data based on energy correction for each atom
	for(i=1;i<=fnum;i+=1)
		String dataFolder = "root:Packages:DFTClustering:" + DFTspec +num2str(i)
		SetDataFolder dataFolder
		neweV = "eV_" + eV + num2str(i)
		newDFTspec = "OS_" + DFTspec + num2str(i)
		Wave w1 = $neweV
		Wave w2 = $newDFTspec
		Variable Eshift = corr[i-1]
		DFTinterp(w1,w2,Eshift)
				
		String intOS = "int_"+newDFTspec
		String inteV = "n_"+neweV
		Wave a = $intOS 
		String tempOS = "t_int_OS_"+DFTspec+num2str(i)
		Wave c = $tempOS
		Duplicate/O a,root:Packages:DFTClustering:$tempOS
		SetDataFolder currentFolder
	endfor
End

Function addInterpSpec(interpSpec,eV,fnum,[dInt]) //Create total interpolated DFT NEXAFS from individual atom
	String interpSpec
	Wave eV
	Variable fnum
	Variable dInt
	
	SetDataFolder root:Packages:DFTClustering:
	
	Wave TotalSpec_NEXAFS
	
	Variable nPointseV = numpnts(eV)
	Variable i
	//Add the interpolated spectra to create the total molecular spectrum
	Make/O/N=(nPointseV) TotalSpec_NEXAFS
	String sumTotal
	for(i=1;i<=fnum;i+=1)
		sumTotal = "t_int_OS_"+ interpSpec + num2str(i)
		Wave w3 = $sumTotal
		TotalSpec_NEXAFS += w3
	endfor
		
	//Plot the Total Spectra 
	if(dInt)
		if(StringMatch(interpSpec, "c") == 1) 
			Display/W=(10,50,360,300)	
			AppendToGraph TotalSpec_NEXAFS vs eV
			Label bottom "eV"
			Label left "Intensity[a.u.]"
			SetAxis bottom 280,310
		elseif(StringMatch(interpSpec,"n") == 1)
			Display/W=(10,50,360,300)	
			AppendToGraph TotalSpec_NEXAFS vs eV
			Label bottom "eV"
			Label left "Intensity[a.u.]"
			SetAxis bottom 400,450
		elseif(StringMatch(interpSpec,"o") ==1)
			Display/W=(10,50,360,300)	
			AppendToGraph TotalSpec_NEXAFS vs eV
			Label bottom "eV"
			Label left "Intensity[a.u.]"
			SetAxis bottom 530,580
		else
			return -1
		endif	
	endif
End

Function Organize_DFT_NEXAFS_Folders(fName,fnum,mol)
	String fName
	Variable fnum
	String mol
	
	String DFT_NXFS_fName = "root:Packages:DFTClustering:DFT_NEXAFS_" + mol
	NewDataFolder/O $DFT_NXFS_fName
	
	Variable i
	
	for(i=1;i<=fnum;i+=1)
		String newfName = fName + num2str(i)
		if(DataFolderExists(newfName)==1)
			MoveDataFolder $newfName,$DFT_NXFS_fName
		endif
	endfor
End

////////////////////////////////////////////////////////////////////////////
//Display Oscillator Strength and simulated NEXAFS in same graph 

Function PlotOSwNEXAFS(fName,eV,offset,mol)

	String fName
	Wave eV
	Variable offset
	String mol
	
	String baseFName = "root:Packages:DFTClustering:PolarAngles_" + mol +":" + fName
	String baseDFTNXAName = "root:Packages:DFTClustering:DFT_NEXAFS_" + mol + ":" + fName
	SetDataFolder $baseFName
	//Plot the oscillator strength
	Wave OS_,eV_
	String wName = "OS_"+fName
	String plotName = fName + "_Start"
	DoWindow $plotName
	if(!V_Flag)	
		Duplicate/O OS_,$wName
		Display/N=$plotName/K=1/W=(10,50,360,300)	
		AppendToGraph/W=$plotName/R $wName vs eV_	//
		Label bottom "Transition Energy [eV]"
		ModifyGraph fStyle(bottom)=1 
		ModifyGraph nticks(bottom)=10
		Label right "ƒ\u"
		ModifyGraph fStyle(right)=1 ,nticks(right)=10 , minor(right)=1
		SetAxis bottom 280,320
		ModifyGraph mirror(bottom)=1,nticks(bottom)=10 ,minor(bottom)=1
		ModifyGraph mode($wName)=1
		ModifyGraph rgb($wName)=(0,0,0)
		ModifyGraph offset($wName)={offset,0}
	//Plot the simulated NEXAFS spectrum 
		SetDataFolder $baseDFTNXAName//root:Packages:DFTClustering:DFT_NEXAFS:$fName
		String wName1 = "eV_"+fName	
		String wName2 = "int_OS_"+fName	
		Wave eWave = $wName1
		Wave osWave = $wName2	
		AppendToGraph/W=$plotName/L osWave vs eWave
		Label left "Transition Intensity[a.u.]\u"
		ModifyGraph fStyle(left)=1 , nticks(left)=10 , minor(left)=1
		ModifyGraph rgb($wName2)=(65535,0,0)
		ModifyGraph mode($wName2)=0
		ModifyGraph lsize=1.5
		Legend/C/N=text0/J/A=MC fname
	endif
	SetDataFolder root:Packages:DFTClustering:
End

Function PlotAllOSwNEXAFS(fnum,eV,Ecorr,mol)
	
	Variable fnum
	Wave eV
	Wave Ecorr
	String mol
		
	Variable i

	for(i=1;i<=fnum;i+=1)
		String fName = "c"+num2str(i)	
		Variable corr = Ecorr[i-1]
		PlotOSwNEXAFS(fName,eV,corr,mol)
	endfor
End

Function RemoveWaves(wName,fnum)
	String wName
	Variable fnum
	
	Variable i
	
	for(i=0;i<=fnum;i+=1)
		String newWName = "t_int_OS_"+wName+num2str(i)
		KillWaves/Z $newWName
	endfor
	
	String randWaves = Wavelist("wave*",";","")
	Variable nRandWaves = ItemsInList(randWaves)
	
	if(nRandWaves <=0 )
		return -1
	else
		for(i=0;i<=nRandWaves-1;i+=1)
			String cWave = StringFromList(i,randWaves)
			Wave w = $cWave
			KillWaves/Z $cWave
		endfor
	endif
End

Function dftRawLayout(nAtoms)

	Variable nAtoms
	
	DoWindow DFT_Summary
	if(V_Flag)
		KillWindow/Z DFT_Summary
	endif
	
	NewLayout/N=DFT_Summary/W=(0,0,410,460)/K=1
	Variable nPages = round(nAtoms/8)
	Variable i,j=1
	for(i=1;i<nPages;i+=1)
		LayoutPageAction appendPage
	endfor
	
	String compareNEXAFSplots = SortList(WinList("*Start",",",""),",",16)
	print compareNEXAFSplots
	String arrange = "Tile/O=1"
	for(i=0;i<=nAtoms-1;i+=1)	
		String compNEXAFSgraph = StringFromList(i,compareNEXAFSplots,",")
		
		if(i<=7)
			AppendLayoutObject/F=1/PAGE=1 graph $compNEXAFSgraph
			LayoutPageAction PAGE=1
			Execute/Q/Z arrange
		elseif(i>7)
			if(mod(i,8)==0)
				j+=1
			endif
			LayoutPageAction PAGE=(j)
			AppendLayoutObject/F=1/PAGE=(j) graph $compNEXAFSgraph
			Execute/Q/Z arrange
		endif
		DoWindow/HIDE=1 $compNEXAFSgraph
	endfor	
End

Function makeCorrWave(GND,EXC,LUMO,nAtoms)

	Wave GND
	Wave EXC
	Wave LUMO
	Variable nAtoms
	
	Make/O/N=(nAtoms) Ecorr
	
	Variable i
	
	for(i=0;i<nAtoms;i+=1)
		Ecorr[i] = (EXC[i] - GND[i]) - LUMO[i]
	endfor
	
End

Function correctIPEnergy(IP,Ecorr)
	Wave IP,Ecorr
	
	Variable nAtoms = numpnts(IP),i
	for(i=0;i<nAtoms;i+=1)
		IP[i] = IP[i] + Ecorr[i]
	endfor
End
